{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-10-28T01:49:54.652249+00:00",
  "repo": "CBonnell/draft-housley-lamps-macaddress-on",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOPNu74s6oCcyy",
      "title": "Add text for new syntax and NC handling, minor fixes",
      "url": "https://github.com/CBonnell/draft-housley-lamps-macaddress-on/pull/1",
      "state": "MERGED",
      "author": "CBonnell",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-09-11T13:28:21Z",
      "updatedAt": "2025-09-12T20:33:41Z",
      "baseRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "baseRefName": "main",
      "baseRefOid": "cf4982595e737fc515cd42e33ec7e16d6b05ee17",
      "headRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "headRefName": "name-constraints",
      "headRefOid": "18c4de057ce84d997d8d12147f292a66928ad179",
      "closedAt": "2025-09-12T20:33:36Z",
      "mergedAt": "2025-09-12T20:33:36Z",
      "mergedBy": "CBonnell",
      "mergeCommit": {
        "oid": "727d2f6d9b11d0ef9db63132d3b8441803a7ebf1"
      },
      "comments": [
        {
          "author": "russhousley",
          "authorAssociation": "COLLABORATOR",
          "body": "The whole module is IMPLICIT, so we can drop IMPLICIT in the MACAddress definition.  However, I just looked at the code needed in pyasn1, and it may be safer to keep the IMPLICIT to make sure the right thing happens.\r\n\r\n",
          "createdAt": "2025-09-11T18:14:11Z",
          "updatedAt": "2025-09-11T18:30:50Z"
        },
        {
          "author": "russhousley",
          "authorAssociation": "COLLABORATOR",
          "body": "The SIZE syntax is wrong.  It should be:\r\n\r\n~~~\r\nMACAddress ::= CHOICE {\r\n  -- 48-bit EUI-48 or 64-bit EUI-64\r\n  macAddress OCTET STRING (SIZE (6 | 8)),\r\n  -- constraint on the upper bits of a 48-bit EUI-48\r\n  macAddress48Constraint [0] IMPLICIT BIT STRING (SIZE(1..48)),\r\n  -- constraint on the upper bits of a 64-bit EUI-64\r\n  macAddress64Constraint [1] IMPLICIT BIT STRING (SIZE(1..64)) }\r\n~~~",
          "createdAt": "2025-09-11T18:19:52Z",
          "updatedAt": "2025-09-11T18:31:16Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOPNu74s6_cKks",
          "commit": {
            "abbreviatedOid": "35fa9a2"
          },
          "author": "tomofumiokubo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-11T14:06:03Z",
          "updatedAt": "2025-09-11T14:06:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOPNu74s6_cz6b",
          "commit": {
            "abbreviatedOid": "35fa9a2"
          },
          "author": "mandelj7",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-11T14:31:30Z",
          "updatedAt": "2025-09-11T14:31:31Z",
          "comments": [
            {
              "originalPosition": 88,
              "body": "s/Certificate Authority/Certification Authority ",
              "createdAt": "2025-09-11T14:31:30Z",
              "updatedAt": "2025-09-11T14:31:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s6_dK8u",
          "commit": {
            "abbreviatedOid": "35fa9a2"
          },
          "author": "mandelj7",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-11T14:48:02Z",
          "updatedAt": "2025-09-11T14:48:02Z",
          "comments": [
            {
              "originalPosition": 108,
              "body": "Should there be an \"a\" before bit string:  \"If the result of the XOR operation is a n bit string consisting of entirely zeros...\"\r\nSame for the next sentence: \"Conversely, if the result of the operation is a n bit string with at least one bit asserted,...\"",
              "createdAt": "2025-09-11T14:48:02Z",
              "updatedAt": "2025-09-11T14:48:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 2,
      "id": "PR_kwDOPNu74s6pXNjH",
      "title": "Clean up abstract + intro, some typo fixes",
      "url": "https://github.com/CBonnell/draft-housley-lamps-macaddress-on/pull/2",
      "state": "MERGED",
      "author": "CBonnell",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-09-18T19:21:40Z",
      "updatedAt": "2025-09-22T15:12:25Z",
      "baseRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "baseRefName": "main",
      "baseRefOid": "727d2f6d9b11d0ef9db63132d3b8441803a7ebf1",
      "headRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "headRefName": "clean-up-abstract-intro",
      "headRefOid": "89297046a735c8c1c61e75f053c6dfd94ded81f8",
      "closedAt": "2025-09-22T15:12:21Z",
      "mergedAt": "2025-09-22T15:12:21Z",
      "mergedBy": "CBonnell",
      "mergeCommit": {
        "oid": "89287b0d4dec364d3dc591facd6e76f67a18c8d5"
      },
      "comments": [
        {
          "author": "russhousley",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me",
          "createdAt": "2025-09-19T16:49:13Z",
          "updatedAt": "2025-09-19T16:49:13Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOPNu74s7BfRpw",
          "commit": {
            "abbreviatedOid": "8929704"
          },
          "author": "tomofumiokubo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-19T17:42:52Z",
          "updatedAt": "2025-09-19T17:42:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOPNu74s7BfbEN",
          "commit": {
            "abbreviatedOid": "8929704"
          },
          "author": "mandelj7",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me.",
          "createdAt": "2025-09-19T17:52:20Z",
          "updatedAt": "2025-09-19T17:52:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 3,
      "id": "PR_kwDOPNu74s6qE-xN",
      "title": "Rework constraint encoding",
      "url": "https://github.com/CBonnell/draft-housley-lamps-macaddress-on/pull/3",
      "state": "MERGED",
      "author": "CBonnell",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-09-23T13:49:03Z",
      "updatedAt": "2025-09-30T23:59:19Z",
      "baseRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "baseRefName": "main",
      "baseRefOid": "89287b0d4dec364d3dc591facd6e76f67a18c8d5",
      "headRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "headRefName": "bit-twiddling",
      "headRefOid": "ef8a6b6130a6c1fa047dc5c266489722b144499f",
      "closedAt": "2025-09-30T16:53:39Z",
      "mergedAt": "2025-09-30T16:53:39Z",
      "mergedBy": "russhousley",
      "mergeCommit": {
        "oid": "58c9deee9fd835bceb8c1c3fe36881a4ef2d20c7"
      },
      "comments": [
        {
          "author": "russhousley",
          "authorAssociation": "COLLABORATOR",
          "body": "We need to add Mike StJohns to the acknowledgments.",
          "createdAt": "2025-09-23T14:09:17Z",
          "updatedAt": "2025-09-23T14:09:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOPNu74s7D2JAb",
          "commit": {
            "abbreviatedOid": "ef8a6b6"
          },
          "author": "mandelj7",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-30T16:06:09Z",
          "updatedAt": "2025-09-30T16:06:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOPNu74s7D7NOY",
          "commit": {
            "abbreviatedOid": "ef8a6b6"
          },
          "author": "tomofumiokubo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-30T23:59:19Z",
          "updatedAt": "2025-09-30T23:59:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDOPNu74s6tR44i",
      "title": "Address WG feedback on -01",
      "url": "https://github.com/CBonnell/draft-housley-lamps-macaddress-on/pull/4",
      "state": "OPEN",
      "author": "CBonnell",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-10-12T01:05:51Z",
      "updatedAt": "2025-10-24T17:11:14Z",
      "baseRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "baseRefName": "main",
      "baseRefOid": "58c9deee9fd835bceb8c1c3fe36881a4ef2d20c7",
      "headRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "headRefName": "wg-feedback",
      "headRefOid": "eb75e1a8486d74a0c8501bd246f82270be7899b5",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "DDvO",
          "authorAssociation": "NONE",
          "body": "Well, Russ just pointed to this PR in response to what I just wrote on the LAMPS list, \r\nbut this PR so far does not actually address my points. In particular not (yet) this,\r\nwhich is a about clarifying the semantics of all-zero masks and making them more expressive/useful:\r\n\r\n>> Section 3.2:\r\n>>\r\n>> It may be worth noting that an all-zero\u00a0mask effectively means no constraint,\r\n>> at least when using the constraint in positive context, a permittedSubtrees field.\r\n>> AFAICS, by\u00a0default this would hold also when using this mask in an excludedSubtrees field.\r\n>>\r\n>> Yet one could also define that\r\n>> an all-zero mask in negative context means to exclude the given variant (either 6 or 8 octets) of MAC addresses.\r\n>> This way, it\u00a0could be expressed that only the other variant (i.e., having 8 or\u00a06 octets, respectively) is permitted.\r\n>\r\n\r\n[...] all-zero masks do already work, in a certain sense.\r\n\r\n* In positive contexts, they lead to \"pass all\" MAC addresses\u00a0of either 6 or 8 bytes length, depending on the length of the constraint. In other words, they mean the same as omitting them (i.e., no constraint given).\r\nMy point here is that this may be not entirely obvious to readers, so I suggest pointing this out **explicitly** in the spec.\r\n*  ~In negative contexts, with the\u00a0semantics defined so far, AFAICS, all-zero masks also lead to \"**pass all**\"\r\n    (or am I wrong on that? If so, please explain, also in the draft text).\r\n    This may be not what is desired from a specification point of view, and they could easily be misunderstood by users.\r\n    Therefore, also to enhance expressiveness of these constraints,\r\n    I suggest explicitly defining for negative contexts a different(!) semantics, namely:\r\n    an all-zero mask in\u00a0negative context means **rejection** of all MAC addresses of either 6 or 8 bytes length, depending on the length of the constraint.\r\n    This way, things would become very clear, and would add support for allowing **only** 8-byte or 6-byte MAC addresses, respectively. Could it be of interest to be able to express and use this type of constraint?~",
          "createdAt": "2025-10-13T18:02:53Z",
          "updatedAt": "2025-10-15T05:40:27Z"
        },
        {
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "body": "On Thu, Oct 16, 2025 at 15:50 Michael StJohns ***@***.***>\r\nwrote:\r\n\r\n> On 10/15/2025 03:11, David von Oheimb wrote:\r\n>\r\n> ***@***.**** commented on this pull request.\r\n> ------------------------------\r\n>\r\n> In draft-housley-lamps-macaddress-on.md\r\n> <https://github.com/CBonnell/draft-housley-lamps-macaddress-on/pull/4#discussion_r2431381022>\r\n> :\r\n>\r\n> >\r\n>  When a constraint is included in the `permittedSubtrees` field of a Name Constraints extension, certificates containing a MACAddress name form of the specific identifier type (EUI-48 or EUI-64) that are issued by the Certification Authority are trusted only when the masked bits (masked according to the \"mask bit pattern\") of the value are binary equal to the \"value bit pattern\".\r\n>\r\n> -When a constraint is included in the `excludedSubtrees` field of a Name Constraints extension, certificates containing a MACAddress name form of the specific identifier type (EUI-48 or EUI-64) that are issued by the Certification Authority are trusted only when the masked bits (masked according ot the \"mask bit pattern\") of the value are not binary equal to the pattern.\r\n> +When a constraint is included in the `excludedSubtrees` field of a Name Constraints extension, certificates containing a MACAddress name form of the specific identifier type (EUI-48 or EUI-64) that are issued by the Certification Authority are trusted only when the masked bits (masked according to the \"mask bit pattern\") of the value are not binary equal to the pattern.\r\n>\r\n>\r\n> Thank you for explaining the overall constraint exclusion/matching\r\n> semantics.\r\n> Not the most intuitive thing to me, but it is as it is.\r\n>\r\n> Now I see that, strictly speaking, having only positive or only negative\r\n> constrains would be sufficient here\r\n> because the range of all possible MAC addresses is finite, such that (at\r\n> least in theory) they can all be enumerated.\r\n>\r\n> Still, there are cases where a combination of MACAddress constraints in\r\n> excludedSubtrees and includedSubtrees can be useful, namely when the\r\n> portion of bits in the negative constraints is different from the portion\r\n> of bits in positive constrains and these portions do not overlap for a\r\n> somewhat larger number of bit positions.\r\n>\r\n> Making my above example fully concrete, here is a simple one:\r\n>\r\n>    - excluded: MAC addresses where the last octet is 0x00\r\n>    - included: MAC addresses where the but-last octet is 0xff\r\n>\r\n> This allows 0x..00ff01, 0x..00ff02, ..., 0x..00ffff, 0x..01ff01, ...\r\n> but forbids 0x..000000, 0x..000100, ..., 0x..00ff00, 0x..01ff00, ...\r\n>\r\n> This can be expressed concisely by combining one positive and one negative\r\n> constraint,\r\n> but when using only positive constrains or only negative ones, 256\r\n> constraints would be required, which makes it more or less non-practical.\r\n> (Things would get even worse with larger portions of bits).\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/CBonnell/draft-housley-lamps-macaddress-on/pull/4#discussion_r2431381022>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AB5TYEONIZ5JEK5UNKBOSA33XXXS3AVCNFSM6AAAAACI6BQO7GVHI2DSMVQWIX3LMV43YUDVNRWFEZLROVSXG5CSMV3GSZLXHMZTGMZYG4ZTQMBXGA>\r\n> .\r\n> You are receiving this because you commented.Message ID:\r\n> <CBonnell/draft-housley-lamps-macaddress-on/pull/4/review/3338738070@\r\n> github.com>\r\n>\r\n> I did miss this case and you're right about the possible need to have both\r\n> includedSubtrees and excludedSubtrees.  I think that resolves my original\r\n> comment then.\r\n>\r\n> Just FYI - you can state this restriction with 7 includedSubtrees not 256\r\n> of them (looking at just the last two octets value/mask) - ff01/ffff,\r\n> ff02/ffff, ff04/ffff, ff08/ffff, ff10/ffff, ff20/ffff, ff40/ffff,\r\n> ff80/ffff.  \"Not zero in the last octet\" is equivalent to \"at least 1 bit\r\n> is set in the last octet\".\r\n>\r\n\r\nOops.  Each of these should have the mask part equal to the value part for\r\nthese two octets.  Sorry\r\n\r\n>\r\n",
          "createdAt": "2025-10-16T20:05:55Z",
          "updatedAt": "2025-10-16T20:05:55Z"
        },
        {
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "body": "With the exception of the outstanding ASN1 set of names question (which is a nit), this commit version resolves all of my comments.  ",
          "createdAt": "2025-10-17T17:15:40Z",
          "updatedAt": "2025-10-17T17:15:40Z"
        },
        {
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "body": "It won\u2019t harm anything, so it\u2019s not a blocker. I would be utterly surprised\r\nif anyone ever references it.\r\n\r\n That said, we should try and avoid this in the future.  It\u2019s somewhat\r\ncargo cult and fixing it would avoid possible errors in the future.\r\n\r\n\r\nOn Thu, Oct 23, 2025 at 16:07 Corey Bonnell ***@***.***>\r\nwrote:\r\n\r\n> ***@***.**** commented on this pull request.\r\n> ------------------------------\r\n>\r\n> In draft-housley-lamps-macaddress-on.md\r\n> <https://github.com/CBonnell/draft-housley-lamps-macaddress-on/pull/4#discussion_r2457101228>\r\n> :\r\n>\r\n> >\r\n>\r\n> The authors discussed and believe that the best path is retaining this\r\n> definition. Although the definition may not be very useful, it is\r\n> consistent with previous documents that define OTHER-NAMEs.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/CBonnell/draft-housley-lamps-macaddress-on/pull/4#discussion_r2457101228>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AB5TYEPPSGIQUWZDJIEAN2T3ZEYPZAVCNFSM6AAAAACI6BQO7GVHI2DSMVQWIX3LMV43YUDVNRWFEZLROVSXG5CSMV3GSZLXHMZTGNZSGM4TGMBQGE>\r\n> .\r\n> You are receiving this because you commented.Message ID:\r\n> <CBonnell/draft-housley-lamps-macaddress-on/pull/4/review/3372393001@\r\n> github.com>\r\n>\r\n",
          "createdAt": "2025-10-23T20:11:24Z",
          "updatedAt": "2025-10-23T20:11:24Z"
        },
        {
          "author": "russhousley",
          "authorAssociation": "COLLABORATOR",
          "body": "Jim Schaad did this to easily merge objects from multiple document to make an acceptable set.  I don't get the cargo cult comment.",
          "createdAt": "2025-10-23T20:30:34Z",
          "updatedAt": "2025-10-23T20:30:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOPNu74s7GnWtJ",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "russhousley",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good.  Thanks.",
          "createdAt": "2025-10-13T16:03:47Z",
          "updatedAt": "2025-10-13T16:03:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOPNu74s7GnZnV",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "tomofumiokubo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM!",
          "createdAt": "2025-10-13T16:07:22Z",
          "updatedAt": "2025-10-13T16:07:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOPNu74s7GoxDk",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-13T18:05:03Z",
          "updatedAt": "2025-10-13T18:05:04Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "I think it makes more sense here to say that the recommendation is to use one or two \"permittedSubtrees\" and completely omit \"excludedSubtrees\".  Basically, you don't need both if you have the value/mask structure.  And you only need two permittedSubtrees if you're permitting both 6 and 8 byte names.",
              "createdAt": "2025-10-13T18:05:04Z",
              "updatedAt": "2025-10-13T18:05:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7GoyJo",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-13T18:06:34Z",
          "updatedAt": "2025-10-13T18:06:34Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "\"valid and canonical\"?",
              "createdAt": "2025-10-13T18:06:34Z",
              "updatedAt": "2025-10-13T18:06:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7Go04E",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-13T18:11:31Z",
          "updatedAt": "2025-10-13T18:11:32Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "\"The first octet of a MAC address contains two flag bits.  Note that IEEE bit numbering has bit '0' as the least significant bit of the octet\"",
              "createdAt": "2025-10-13T18:11:32Z",
              "updatedAt": "2025-10-13T18:11:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7Go9bq",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "DDvO",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-13T18:25:19Z",
          "updatedAt": "2025-10-13T18:25:19Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "AFAICS, \"canonical\" is sufficient here, and this is to the point: the rule is about uniqueness of the value part.\r\nSince the values of the bits not covered by the mask do not matter for the constraint, any bit values can be considered valid there.\r\n",
              "createdAt": "2025-10-13T18:25:19Z",
              "updatedAt": "2025-10-13T18:35:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7GqHOs",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-13T20:12:36Z",
          "updatedAt": "2025-10-13T20:12:36Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "I suggest deleting these lines.  This construct is needed when you define a new CLASS and is use to relate the CLASS definition to the actual ASN1 structure.  otherName as an object is already defined as \"otherName INSTANCE OF OTHER-NAME\" and that takes care of the cross mapping.\n\nThis set structure would only be needed if you were defining OTHER-NAME for the first time, or you were defining a structure that would be pulling things from a set of MACAddress.  Note that any OTHER-NAME in this set would have to have a different OID meaning not a MACAddress..... ",
              "createdAt": "2025-10-13T20:12:36Z",
              "updatedAt": "2025-10-13T20:12:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7GqM_b",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-13T20:24:21Z",
          "updatedAt": "2025-10-13T20:24:21Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "I can live with it.  If you use the \"mask AND happens after 'name XOR value', this works EVEN if an implementer ignores the MUST NOT.   It doesn't actually work properly (again if the implementer ignores MN) if you use the calculation you proposed earlier:\n\n   3. Perform a bitwise AND operation of the mask bit pattern\n       with the octets of the name value.\n\n   4. If and only if the result of step 3 equals the value bit pattern,\n       the name matches the constraint.\n\nE.g. [ff 00 00 03 00 00 ff 00 00 00 00 00] does not match [ff 00 00 00 00 02] using your scheme.\n\n[ff 00 00 00 00 00] & [ff 00 00 00 00 02] => [ff 00 00 00 00 00] ^= [ff 00 00 03 00 00].\n\nSo its both about canonicalization and getting a value that's valid in all situations.\n\nBut as I said - I can live with it.",
              "createdAt": "2025-10-13T20:24:21Z",
              "updatedAt": "2025-10-13T20:24:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7Gqgdy",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-13T21:01:13Z",
          "updatedAt": "2025-10-13T21:01:13Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "Instead:\n\nA constraint that is represented as an OCTET STRING of exactly 12 octets is treated as a non-match for all macAddress values that are encoded using 8 octets. Likewise, a constraint that is represented as an OCTET STRING of exactly 16 octets is to macAddress values is treated as a non-match for all macAddress values that are encoded using 6 octets.  NameConstraints that want to affect both types of macAddress MUST provide individual constraints for each type.\n\nIf I only provide a EUI48 constraint, the current text seems to imply that there are no constraints on EUI64 addresses.  I don't think that is what you intended or what makes sense here.",
              "createdAt": "2025-10-13T21:01:13Z",
              "updatedAt": "2025-10-13T21:01:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7GuU5D",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "DDvO",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-14T06:09:17Z",
          "updatedAt": "2025-10-14T06:09:17Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "I can imagine that it's good to recommend using one or two constraints in the permittedSubtrees and avoid using them in excludedSubtrees.\r\n\r\nYet I do not believe that the constraints in excludedSubtrees are in general not needed.\r\nFor example, there may be the (rare) case the one wants to express that for a certain portion of the MAC address bits, a certain pattern is required (for which positive constraints are needed) while for some other portion of the MAC address bits, a certain pattern is forbidden - to express this, negative constraints are needed in addition.",
              "createdAt": "2025-10-14T06:09:17Z",
              "updatedAt": "2025-10-14T06:10:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7GuV7f",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "DDvO",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-14T06:11:18Z",
          "updatedAt": "2025-10-14T06:11:18Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "(Oops, I was typing and sending too fast, my original comment here contained a serious mistake, now corrected by editing it.)",
              "createdAt": "2025-10-14T06:11:18Z",
              "updatedAt": "2025-10-14T06:11:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7G7CPa",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-14T20:30:36Z",
          "updatedAt": "2025-10-14T20:30:36Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "Hi David - \n\nDoesn't actually work.  A given excludedSubtree is not mated to any specific permittedSubtree.  The name acceptance logic is something like:\n\nif (excludedSubtrees exist) {\n  if (any excludedSubtrees match the name) THEN {\n     reject;\n  } \n}\nif (includedSubtrees exist) {\n   if (any includedSubtrees match the name) then {\n     accept;\n   } \n  reject;\n}\naccept;\n\nMike",
              "createdAt": "2025-10-14T20:30:36Z",
              "updatedAt": "2025-10-14T20:30:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7G7NGZ",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-14T20:41:11Z",
          "updatedAt": "2025-10-14T20:41:11Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "I think this para and the next need to be removed.   This mostly describes how NameConstraint processing works in general.  And its probably wrong as well.  If a name matches ANY excludedSubtree entry the certificate is invalid, regardless of whether or not it also exists in an permittedSubtree entry.  \n\nIn any event  -> s/trusted/considered valid/ if you do keep it and move to the nameconstraint processing section instead.  Also, uses \"matches the constraint\" to replace from \"... the masked bits (masked ....\" to the end of the sentence in both paragraphs.",
              "createdAt": "2025-10-14T20:41:11Z",
              "updatedAt": "2025-10-14T20:44:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7HARmW",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "DDvO",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-15T07:11:20Z",
          "updatedAt": "2025-10-15T07:11:21Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "Thank you for explaining the overall constraint exclusion/matching semantics.\r\nNot the most intuitive thing to me, but it is as it is.\r\n\r\nNow I see that, strictly speaking, having only positive or only negative constrains would be sufficient here \r\nbecause the range of all possible MAC addresses is finite, such that (at least in theory) they can all be enumerated.\r\n\r\nStill, there are cases where a combination of MACAddress constraints in excludedSubtrees and includedSubtrees can be useful, namely when the portion of bits in the negative constraints is different from the portion of bits in positive constrains and these portions do not overlap for a somewhat larger number of bit positions.\r\n\r\nMaking my above example fully concrete, here is a simple one:\r\n* excluded: MAC addresses where the last octet is 0x00\r\n* included: MAC addresses where the but-last octet is 0xff\r\n\r\nThis allows 0x..00ff01, 0x..00ff02, ..., 0x..00ffff, 0x..01ff01, ...\r\nbut forbids 0x..000000, 0x..000100, ..., 0x..00ff00, 0x..01ff00, ...\r\n\r\nThis can be expressed concisely by combining one positive and one negative constraint,\r\nbut when using only positive constrains or only negative ones, 256 constraints would be required, which makes it more or less non-practical. (Things would get even worse with larger portions of bits).\r\n\r\n",
              "createdAt": "2025-10-15T07:11:20Z",
              "updatedAt": "2025-10-15T07:11:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7HBD6a",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "DDvO",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-15T08:02:24Z",
          "updatedAt": "2025-10-15T08:02:25Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "I meanwhile see and agree that there is some overlap with the general NameConstraint semantics and machinery.\r\nSo no need to describe here the specific effects in positive (permittedSubtrees) and negative (excludedSubtree) contexts.\r\nBeyond this, I also confirm that in the way it is described in v01, where the positive and negative contexts are described as if they were independent, the text is partly inconsistent with the overall procedure implied by RFC 5280 and summarized in https://github.com/CBonnell/draft-housley-lamps-macaddress-on/pull/4#discussion_r2430375654.\r\nSo part of it must be either corrected or left out, where I agree to prefer the latter.\r\n\r\nYet still need to specify what is common between the two (permittedSubtrees and excludedSubtree) application contexts, e.g.:\r\n\r\n_A MACAddress name of a specific identifier type (i.e., either EUI-48 or EUI-64) matches a constraint on the same identifier type (EUI-48 or EUI-64) when the masked bits (according to the bits set in the \"mask bit pattern\") of the address value are binary equal to the \"value bit pattern\" (at the same bit positions). It does not match any constraint on the other identifier type (i.e., EUI-64 or EUI-48, respectively)._",
              "createdAt": "2025-10-15T08:02:25Z",
              "updatedAt": "2025-10-16T17:35:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7HBm7x",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "DDvO",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-15T08:34:12Z",
          "updatedAt": "2025-10-15T08:34:12Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "I meanwhile believe to understand the intended meaning and thus agree here.\r\n\r\nFor a text suggestion covering this and other aspects in a succinct way, see the last paragraph of https://github.com/CBonnell/draft-housley-lamps-macaddress-on/pull/4#discussion_r2431525489.",
              "createdAt": "2025-10-15T08:34:12Z",
              "updatedAt": "2025-10-15T08:34:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7HaINi",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "russhousley",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-16T15:18:37Z",
          "updatedAt": "2025-10-16T15:18:37Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "This approach is used in documents that build on the OTHER-NAME CLASS.  It defines a list of the new name forms to be merged with the ones defined elsewhere.\r\n\r\nFor example, RFC 5911 has the following to handle the other name definition from RFC 4108:\r\n\r\n~~~\r\n  FirmwareOtherNames OTHER-NAME ::= {\r\n          on-hardwareModuleName, ... }\r\n~~~\r\n\r\nIn short, This is following the example set by Jim Schaad.",
              "createdAt": "2025-10-16T15:18:37Z",
              "updatedAt": "2025-10-16T15:18:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7Hr_t9",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "CBonnell",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-17T12:50:46Z",
          "updatedAt": "2025-10-17T12:50:46Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "I believe the conclusion here is that we allow constraints in both `permittedSubtrees` and `excludedSubtrees`.",
              "createdAt": "2025-10-17T12:50:46Z",
              "updatedAt": "2025-10-17T12:50:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7HsCuT",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "CBonnell",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-17T12:52:37Z",
          "updatedAt": "2025-10-17T12:52:37Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "I prefer \"canonical\" over \"canonical and valid\" because setting non-significant bits in the value mask still works using the algorithm presented in the draft. I agree that it would be a bug if such a constraint value were applied to David's algorithm.",
              "createdAt": "2025-10-17T12:52:37Z",
              "updatedAt": "2025-10-17T12:52:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7HsEVX",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "CBonnell",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-17T12:53:35Z",
          "updatedAt": "2025-10-17T12:53:35Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "I believe I address this in the latest commit.",
              "createdAt": "2025-10-17T12:53:35Z",
              "updatedAt": "2025-10-17T12:53:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7HsFpg",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "CBonnell",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-17T12:54:24Z",
          "updatedAt": "2025-10-17T12:54:24Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "This should be addressed in the latest commit (just chopped it out because it was redundant and incorrect).",
              "createdAt": "2025-10-17T12:54:24Z",
              "updatedAt": "2025-10-17T12:54:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7HtrVr",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "DDvO",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-17T14:32:05Z",
          "updatedAt": "2025-10-17T14:32:05Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "Indeed, the removal of the two problematic paragraphs about the use in permittedSubtrees and excludedSubtree\r\ntogether with the insertion of\r\n> \r\n1. If the name value is 6 octets (representing an EUI-48 value) and the constraint value is 16 octets (representing an EUI-64 constraint), then the name does not match the constraint.\r\n2. If the name value is 8 octets (representing an EUI-64 value) and the constraint value is 12 octets (representing an EUI-48 constraint), then the name does not match the constraint.\r\n\r\nmakes the overall text correct and complete w.r.t. the intended semantics of matching.",
              "createdAt": "2025-10-17T14:32:05Z",
              "updatedAt": "2025-10-17T14:32:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7HtseR",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "DDvO",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-17T14:33:22Z",
          "updatedAt": "2025-10-17T14:33:22Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "As it stands now, the matching semantics is given in the 7-step procedure only.\r\nAs a reader, and likely even as an implementer, \r\nI would have preferred to have in addition a concise abstract definition like I suggested above:\r\n> A MACAddress name of a specific identifier type (i.e., either EUI-48 or EUI-64) matches a constraint on the same identifier type (EUI-48 or EUI-64) when the masked bits (according to the bits set in the \"mask bit pattern\") of the address value are binary equal to the \"value bit pattern\" (at the same bit positions). It does not match any constraint on the other identifier type (i.e., EUI-64 or EUI-48, respectively)\r\n\r\nWell, the choice is a matter of taste and pragmatics.",
              "createdAt": "2025-10-17T14:33:22Z",
              "updatedAt": "2025-10-17T14:33:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7HviIY",
          "commit": {
            "abbreviatedOid": "522d2e4"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-17T16:48:29Z",
          "updatedAt": "2025-10-17T16:48:29Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "I wrote a response to this, but it didn't show up here.  I think Jim's original entry for FirmwareOtherNames was wrong and this is wrong.\n\nWhen you define a CLASS, and the associated ASN1 object, you parameterize the object using values from the class.  In our current models, we define a table of CLASS instantiations, and use that globally defined table (which is referenced in the object declaration) to lookup items used resolve the object definition.   That table generally ends up being defined as \"ClassTable SOME-CLASS ::= { ... }\".  If you later want to add a few specific items to that class table you can do \"ClassTable SOME-CLASS ::= { ..., SomeClassDef1, SomeClassDef2 }\"\n\nIn a few instances we do subcollections of various class definitions (e.g. DIGEST-ALGORITHM and DigestAlgorithmSet and MessageDigestAlgs) to group class definitions for specific purposes.\n\nBut that's not what's happening here.  We don't group \"on-hardwareModuleName\" with anything else, and we don't modify the generic set of all OTHER-NAME classes (which wasn't actually created....).\n\nIf you wanted to do \"OtherNameSet OTHER-NAME ::= { on-hardwareName, on-MacAddrss, ...} here, and change the definition in GeneralName from \"INSTANCE OF OTHER-NAME\" to a parameterized version of OtherName based on the 5280 definition, that would make more sense.  ",
              "createdAt": "2025-10-17T16:48:29Z",
              "updatedAt": "2025-10-17T16:48:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7Hvmrm",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "russhousley",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-17T16:54:44Z",
          "updatedAt": "2025-10-17T16:54:44Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "Just because we can come up with the logic for both permittedSubtrees and excludedSubtrees. Has anyone ever seen IPAddress name constraints used in both permittedSubtrees and excludedSubtrees?",
              "createdAt": "2025-10-17T16:54:44Z",
              "updatedAt": "2025-10-17T16:54:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7Hvy1N",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-17T17:13:36Z",
          "updatedAt": "2025-10-17T17:13:36Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "I suggested pulling this because it felt ambiguous.  \"of a specific identifier type\" and \"same identifier type\" could be read to mean the specific OtherName in which case it was redundant, or a specific subtype of MACAddress - which AFAICT, hadn't been defined elsewhere (you used \"variants\" which isn't quite the same).  The other part was the description of the matching algorithm which had me reading it multiple times to figure out how it would translate to math.  Concise would have been \"2 * length (name) == length (constraint) &&  (constraint.value ^ address) & constraint.mask == 0\" ",
              "createdAt": "2025-10-17T17:13:36Z",
              "updatedAt": "2025-10-17T17:13:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7Hwaqt",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "DDvO",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-17T18:02:16Z",
          "updatedAt": "2025-10-17T18:02:17Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "This formula reads even better, very brief and precise! Please, add it.\r\nCould be as a note, or in my view even better as the definition of the constraint semantics, from which the given algorithm can be said to be derived. ",
              "createdAt": "2025-10-17T18:02:16Z",
              "updatedAt": "2025-10-17T18:20:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7HwtZy",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "DDvO",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-17T18:23:33Z",
          "updatedAt": "2025-10-17T18:23:34Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "Among others, from the formula it is immediate to see that an all-zero mask boils down to constraining the length/subtype only. ",
              "createdAt": "2025-10-17T18:23:33Z",
              "updatedAt": "2025-10-17T18:23:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7Hw4jA",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "DDvO",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-17T18:33:57Z",
          "updatedAt": "2025-10-17T18:33:57Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "Well, I have not seen this in the wild, \r\nbut who knows what people may do in their scenarios with IP/MAC address constraints since/when available.\r\n\r\nAt least I see little point in artificially limiting the expressiveness being offered here by default.\r\nAnd after the clarification that has been achieved now, it does not hurt that the MAC address constraints\r\n(by the virtue of permittedSubtrees and excludedSubtrees no more described here but in RFC 5280)\r\ncan be used in positive and/or negative contexts.\r\n",
              "createdAt": "2025-10-17T18:33:57Z",
              "updatedAt": "2025-10-18T07:49:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7H1g6n",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "CBonnell",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-18T07:00:07Z",
          "updatedAt": "2025-10-18T07:00:08Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "Thanks, while I prefer the textual expression, I agree that having the concise expression would be beneficial to some readers.\r\n\r\nI added it.",
              "createdAt": "2025-10-18T07:00:08Z",
              "updatedAt": "2025-10-18T07:00:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7H1srT",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "DDvO",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-18T07:53:01Z",
          "updatedAt": "2025-10-18T07:53:01Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "Thank you!\r\n\r\nReadability could be further enhanced by breaking up the line (which I suppose will be required anyway) this way:\r\n```\r\n2 * length(name) == length(constraint) && \r\n((constraint.value_bit_pattern ^ name) & constraint.mask_bit_pattern) == 0\r\n```",
              "createdAt": "2025-10-18T07:53:01Z",
              "updatedAt": "2025-10-18T07:53:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7JAqIp",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "CBonnell",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-23T20:07:02Z",
          "updatedAt": "2025-10-23T20:07:02Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "The authors discussed and believe that the best path is retaining this definition. Although the definition may not be very useful, it is consistent with previous documents that define OTHER-NAMEs.",
              "createdAt": "2025-10-23T20:07:02Z",
              "updatedAt": "2025-10-23T20:07:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7JBEz2",
          "commit": {
            "abbreviatedOid": "eb75e1a"
          },
          "author": "russhousley",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-10-23T20:27:34Z",
          "updatedAt": "2025-10-23T20:27:34Z",
          "comments": []
        }
      ]
    }
  ]
}