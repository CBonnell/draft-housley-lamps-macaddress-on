{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-10-14T01:47:11.460638+00:00",
  "repo": "CBonnell/draft-housley-lamps-macaddress-on",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOPNu74s6oCcyy",
      "title": "Add text for new syntax and NC handling, minor fixes",
      "url": "https://github.com/CBonnell/draft-housley-lamps-macaddress-on/pull/1",
      "state": "MERGED",
      "author": "CBonnell",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-09-11T13:28:21Z",
      "updatedAt": "2025-09-12T20:33:41Z",
      "baseRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "baseRefName": "main",
      "baseRefOid": "cf4982595e737fc515cd42e33ec7e16d6b05ee17",
      "headRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "headRefName": "name-constraints",
      "headRefOid": "18c4de057ce84d997d8d12147f292a66928ad179",
      "closedAt": "2025-09-12T20:33:36Z",
      "mergedAt": "2025-09-12T20:33:36Z",
      "mergedBy": "CBonnell",
      "mergeCommit": {
        "oid": "727d2f6d9b11d0ef9db63132d3b8441803a7ebf1"
      },
      "comments": [
        {
          "author": "russhousley",
          "authorAssociation": "COLLABORATOR",
          "body": "The whole module is IMPLICIT, so we can drop IMPLICIT in the MACAddress definition.  However, I just looked at the code needed in pyasn1, and it may be safer to keep the IMPLICIT to make sure the right thing happens.\r\n\r\n",
          "createdAt": "2025-09-11T18:14:11Z",
          "updatedAt": "2025-09-11T18:30:50Z"
        },
        {
          "author": "russhousley",
          "authorAssociation": "COLLABORATOR",
          "body": "The SIZE syntax is wrong.  It should be:\r\n\r\n~~~\r\nMACAddress ::= CHOICE {\r\n  -- 48-bit EUI-48 or 64-bit EUI-64\r\n  macAddress OCTET STRING (SIZE (6 | 8)),\r\n  -- constraint on the upper bits of a 48-bit EUI-48\r\n  macAddress48Constraint [0] IMPLICIT BIT STRING (SIZE(1..48)),\r\n  -- constraint on the upper bits of a 64-bit EUI-64\r\n  macAddress64Constraint [1] IMPLICIT BIT STRING (SIZE(1..64)) }\r\n~~~",
          "createdAt": "2025-09-11T18:19:52Z",
          "updatedAt": "2025-09-11T18:31:16Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOPNu74s6_cKks",
          "commit": {
            "abbreviatedOid": "35fa9a2"
          },
          "author": "tomofumiokubo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-11T14:06:03Z",
          "updatedAt": "2025-09-11T14:06:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOPNu74s6_cz6b",
          "commit": {
            "abbreviatedOid": "35fa9a2"
          },
          "author": "mandelj7",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-11T14:31:30Z",
          "updatedAt": "2025-09-11T14:31:31Z",
          "comments": [
            {
              "originalPosition": 88,
              "body": "s/Certificate Authority/Certification Authority ",
              "createdAt": "2025-09-11T14:31:30Z",
              "updatedAt": "2025-09-11T14:31:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s6_dK8u",
          "commit": {
            "abbreviatedOid": "35fa9a2"
          },
          "author": "mandelj7",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-11T14:48:02Z",
          "updatedAt": "2025-09-11T14:48:02Z",
          "comments": [
            {
              "originalPosition": 108,
              "body": "Should there be an \"a\" before bit string:  \"If the result of the XOR operation is a n bit string consisting of entirely zeros...\"\r\nSame for the next sentence: \"Conversely, if the result of the operation is a n bit string with at least one bit asserted,...\"",
              "createdAt": "2025-09-11T14:48:02Z",
              "updatedAt": "2025-09-11T14:48:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 2,
      "id": "PR_kwDOPNu74s6pXNjH",
      "title": "Clean up abstract + intro, some typo fixes",
      "url": "https://github.com/CBonnell/draft-housley-lamps-macaddress-on/pull/2",
      "state": "MERGED",
      "author": "CBonnell",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-09-18T19:21:40Z",
      "updatedAt": "2025-09-22T15:12:25Z",
      "baseRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "baseRefName": "main",
      "baseRefOid": "727d2f6d9b11d0ef9db63132d3b8441803a7ebf1",
      "headRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "headRefName": "clean-up-abstract-intro",
      "headRefOid": "89297046a735c8c1c61e75f053c6dfd94ded81f8",
      "closedAt": "2025-09-22T15:12:21Z",
      "mergedAt": "2025-09-22T15:12:21Z",
      "mergedBy": "CBonnell",
      "mergeCommit": {
        "oid": "89287b0d4dec364d3dc591facd6e76f67a18c8d5"
      },
      "comments": [
        {
          "author": "russhousley",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me",
          "createdAt": "2025-09-19T16:49:13Z",
          "updatedAt": "2025-09-19T16:49:13Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOPNu74s7BfRpw",
          "commit": {
            "abbreviatedOid": "8929704"
          },
          "author": "tomofumiokubo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-19T17:42:52Z",
          "updatedAt": "2025-09-19T17:42:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOPNu74s7BfbEN",
          "commit": {
            "abbreviatedOid": "8929704"
          },
          "author": "mandelj7",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me.",
          "createdAt": "2025-09-19T17:52:20Z",
          "updatedAt": "2025-09-19T17:52:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 3,
      "id": "PR_kwDOPNu74s6qE-xN",
      "title": "Rework constraint encoding",
      "url": "https://github.com/CBonnell/draft-housley-lamps-macaddress-on/pull/3",
      "state": "MERGED",
      "author": "CBonnell",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-09-23T13:49:03Z",
      "updatedAt": "2025-09-30T23:59:19Z",
      "baseRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "baseRefName": "main",
      "baseRefOid": "89287b0d4dec364d3dc591facd6e76f67a18c8d5",
      "headRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "headRefName": "bit-twiddling",
      "headRefOid": "ef8a6b6130a6c1fa047dc5c266489722b144499f",
      "closedAt": "2025-09-30T16:53:39Z",
      "mergedAt": "2025-09-30T16:53:39Z",
      "mergedBy": "russhousley",
      "mergeCommit": {
        "oid": "58c9deee9fd835bceb8c1c3fe36881a4ef2d20c7"
      },
      "comments": [
        {
          "author": "russhousley",
          "authorAssociation": "COLLABORATOR",
          "body": "We need to add Mike StJohns to the acknowledgments.",
          "createdAt": "2025-09-23T14:09:17Z",
          "updatedAt": "2025-09-23T14:09:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOPNu74s7D2JAb",
          "commit": {
            "abbreviatedOid": "ef8a6b6"
          },
          "author": "mandelj7",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-30T16:06:09Z",
          "updatedAt": "2025-09-30T16:06:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOPNu74s7D7NOY",
          "commit": {
            "abbreviatedOid": "ef8a6b6"
          },
          "author": "tomofumiokubo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-30T23:59:19Z",
          "updatedAt": "2025-09-30T23:59:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDOPNu74s6tR44i",
      "title": "Address WG feedback on -01",
      "url": "https://github.com/CBonnell/draft-housley-lamps-macaddress-on/pull/4",
      "state": "OPEN",
      "author": "CBonnell",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-10-12T01:05:51Z",
      "updatedAt": "2025-10-13T21:01:13Z",
      "baseRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "baseRefName": "main",
      "baseRefOid": "58c9deee9fd835bceb8c1c3fe36881a4ef2d20c7",
      "headRepository": "CBonnell/draft-housley-lamps-macaddress-on",
      "headRefName": "wg-feedback",
      "headRefOid": "0e190c0129ee63fc99e299d01a7113f9b79a8f54",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "DDvO",
          "authorAssociation": "NONE",
          "body": "Well, Russ just pointed to this PR in response to what I just wrote on the LAMPS list, \r\nbut this PR so far does not actually address my points. In particular not (yet) this,\r\nwhich is a about clarifying the semantics of all-zero masks and making them more expressive/useful:\r\n\r\n>> Section 3.2:\r\n>>\r\n>> It may be worth noting that an all-zero\u00a0mask effectively means no constraint,\r\n>> at least when using the constraint in positive context, a permittedSubtrees field.\r\n>> AFAICS, by\u00a0default this would hold also when using this mask in an excludedSubtrees field.\r\n>>\r\n>> Yet one could also define that\r\n>> an all-zero mask in negative context means to exclude the given variant (either 6 or 8 octets) of MAC addresses.\r\n>> This way, it\u00a0could be expressed that only the other variant (i.e., having 8 or\u00a06 octets, respectively) is permitted.\r\n>\r\n\r\n[...] all-zero masks do already work, in a certain sense.\r\n\r\n* In positive contexts, they lead to \"pass all\" MAC addresses\u00a0of either 6 or 8 bytes length, depending on the length of the constraint. In other words, they mean the same as omitting them (i.e., no constraint given).\r\nMy point here is that this may be not entirely obvious to readers, so I suggest pointing this out **explicitly** in the spec.\r\n*  In negative contexts, with the\u00a0semantics defined so far, AFAICS, all-zero masks also lead to \"**pass all**\"\r\n    (or am I wrong on that? If so, please explain, also in the draft text).\r\n    This may be not what is desired from a specification point of view, and they could easily be misunderstood by users.\r\n    Therefore, also to enhance expressiveness of these constraints,\r\n    I suggest explicitly defining for negative contexts a different(!) semantics, namely:\r\n    an all-zero mask in\u00a0negative context means **rejection** of all MAC addresses of either 6 or 8 bytes length, depending on the length of the constraint.\r\n    This way, things would become very clear, and would add support for allowing **only** 8-byte or 6-byte MAC addresses, respectively. Could it be of interest to be able to express and use this type of constraint?",
          "createdAt": "2025-10-13T18:02:53Z",
          "updatedAt": "2025-10-13T18:02:53Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOPNu74s7GnWtJ",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "russhousley",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good.  Thanks.",
          "createdAt": "2025-10-13T16:03:47Z",
          "updatedAt": "2025-10-13T16:03:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOPNu74s7GnZnV",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "tomofumiokubo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM!",
          "createdAt": "2025-10-13T16:07:22Z",
          "updatedAt": "2025-10-13T16:07:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOPNu74s7GoxDk",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-13T18:05:03Z",
          "updatedAt": "2025-10-13T18:05:04Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "I think it makes more sense here to say that the recommendation is to use one or two \"permittedSubtrees\" and completely omit \"excludedSubtrees\".  Basically, you don't need both if you have the value/mask structure.  And you only need two permittedSubtrees if you're permitting both 6 and 8 byte names.",
              "createdAt": "2025-10-13T18:05:04Z",
              "updatedAt": "2025-10-13T18:05:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7GoyJo",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-13T18:06:34Z",
          "updatedAt": "2025-10-13T18:06:34Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "\"valid and canonical\"?",
              "createdAt": "2025-10-13T18:06:34Z",
              "updatedAt": "2025-10-13T18:06:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7Go04E",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-13T18:11:31Z",
          "updatedAt": "2025-10-13T18:11:32Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "\"The first octet of a MAC address contains two flag bits.  Note that IEEE bit numbering has bit '0' as the least significant bit of the octet\"",
              "createdAt": "2025-10-13T18:11:32Z",
              "updatedAt": "2025-10-13T18:11:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7Go9bq",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "DDvO",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-13T18:25:19Z",
          "updatedAt": "2025-10-13T18:25:19Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "AFAICS, \"canonical\" is sufficient here, and this is to the point: the rule is about uniqueness of the value part.\r\nSince the values of the bits not covered by the mask do not matter for the constraint, any bit values can be considered valid there.\r\n",
              "createdAt": "2025-10-13T18:25:19Z",
              "updatedAt": "2025-10-13T18:35:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7GqHOs",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-13T20:12:36Z",
          "updatedAt": "2025-10-13T20:12:36Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "I suggest deleting these lines.  This construct is needed when you define a new CLASS and is use to relate the CLASS definition to the actual ASN1 structure.  otherName as an object is already defined as \"otherName INSTANCE OF OTHER-NAME\" and that takes care of the cross mapping.\n\nThis set structure would only be needed if you were defining OTHER-NAME for the first time, or you were defining a structure that would be pulling things from a set of MACAddress.  Note that any OTHER-NAME in this set would have to have a different OID meaning not a MACAddress..... ",
              "createdAt": "2025-10-13T20:12:36Z",
              "updatedAt": "2025-10-13T20:12:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7GqM_b",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-13T20:24:21Z",
          "updatedAt": "2025-10-13T20:24:21Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "I can live with it.  If you use the \"mask AND happens after 'name XOR value', this works EVEN if an implementer ignores the MUST NOT.   It doesn't actually work properly (again if the implementer ignores MN) if you use the calculation you proposed earlier:\n\n   3. Perform a bitwise AND operation of the mask bit pattern\n       with the octets of the name value.\n\n   4. If and only if the result of step 3 equals the value bit pattern,\n       the name matches the constraint.\n\nE.g. [ff 00 00 03 00 00 ff 00 00 00 00 00] does not match [ff 00 00 00 00 02] using your scheme.\n\n[ff 00 00 00 00 00] & [ff 00 00 00 00 02] => [ff 00 00 00 00 00] ^= [ff 00 00 03 00 00].\n\nSo its both about canonicalization and getting a value that's valid in all situations.\n\nBut as I said - I can live with it.",
              "createdAt": "2025-10-13T20:24:21Z",
              "updatedAt": "2025-10-13T20:24:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOPNu74s7Gqgdy",
          "commit": {
            "abbreviatedOid": "0e190c0"
          },
          "author": "mstjohns",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-10-13T21:01:13Z",
          "updatedAt": "2025-10-13T21:01:13Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "Instead:\n\nA constraint that is represented as an OCTET STRING of exactly 12 octets is treated as a non-match for all macAddress values that are encoded using 8 octets. Likewise, a constraint that is represented as an OCTET STRING of exactly 16 octets is to macAddress values is treated as a non-match for all macAddress values that are encoded using 6 octets.  NameConstraints that want to affect both types of macAddress MUST provide individual constraints for each type.\n\nIf I only provide a EUI48 constraint, the current text seems to imply that there are no constraints on EUI64 addresses.  I don't think that is what you intended or what makes sense here.",
              "createdAt": "2025-10-13T21:01:13Z",
              "updatedAt": "2025-10-13T21:01:13Z"
            }
          ]
        }
      ]
    }
  ]
}